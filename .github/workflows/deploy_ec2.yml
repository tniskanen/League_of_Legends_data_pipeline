name: Deploy EC2 Infrastructure

on:
  push:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      ec2_files_changed: ${{ steps.changed.outputs.ec2_files_changed }}
      docker_files_changed: ${{ steps.changed.outputs.docker_files_changed }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git diff

      - name: Check for changes
        id: changed
        run: |
          echo "Checking for file changes..."
          
          # Handle first commit case
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            echo "First commit detected, treating all files as changed"
            echo "ec2_files_changed=true" >> $GITHUB_OUTPUT
            echo "docker_files_changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get changed files
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt
          
          # Detect EC2 file changes
          if grep -Eq '^ec2_deploy/(starter\.sh|run\.sh)$|^variables\.env$' changed_files.txt; then
            echo "EC2 files changed detected"
            echo "ec2_files_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No EC2 files changed"
            echo "ec2_files_changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Detect Docker-related changes
          if grep -Eiq '^(docker/ec2|EC2/|ec2_deploy/(build\.sh|deploy\.sh)|Utils/|requirements\.txt|setup\.py|__init__\.py|\.gitignore|\.dockerignore)' changed_files.txt; then
            echo "Docker files changed detected"
            echo "docker_files_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No Docker files changed"
            echo "docker_files_changed=false" >> $GITHUB_OUTPUT
          fi

  update-ec2-files:
    needs: detect-changes
    if: needs.detect-changes.outputs.ec2_files_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Test SSH connection
        run: |
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ec2_key.pem ${{ vars.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} "echo 'SSH connection successful'"

      - name: Upload updated files to EC2
        run: |
          # Create remote directory if it doesn't exist
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ vars.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} "mkdir -p /home/${{ vars.EC2_USER }}"
          
          # Upload files
          scp -o StrictHostKeyChecking=no -i ec2_key.pem ec2_deploy/starter.sh ec2_deploy/run.sh ${{ vars.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }}:/home/${{ vars.EC2_USER }}/
          scp -o StrictHostKeyChecking=no -i ec2_key.pem variables.env ${{ vars.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }}:/home/${{ vars.EC2_USER }}/
          
          # Make scripts executable
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ vars.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} "chmod +x /home/${{ vars.EC2_USER }}/*.sh"

  build-and-deploy-docker:
    needs: detect-changes
    if: needs.detect-changes.outputs.docker_files_changed == 'true'
    runs-on: ubuntu-latest
    env:
      # Map secrets to standard AWS environment variables
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_EC2 }}  # This is the full ECR registry URI
      ECR_REPOSITORY_EC2: ${{ secrets.ECR_REPOSITORY_EC2 }}
      
      # Map variables
      CLEANUP: ${{ vars.CLEANUP }}
      DEBUG: ${{ vars.DEBUG }}
      EC2_USER: ${{ vars.EC2_USER }}
      REGION: ${{ secrets.AWS_REGION }}
      REPO_NAME: ${{ vars.REPO_NAME }}
      
      # Optional build args
      BUILD_ARGS: ${{ vars.BUILD_ARGS }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate environment variables
        run: |
          echo "Validating required environment variables..."
          required_vars=("ECR_REGISTRY_EC2" "AWS_REGION" "ECR_REPOSITORY_EC2")
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "❌ Error: $var is not set"
              exit 1
            fi
          done
          echo "✅ All required variables are set"

      - name: Debug environment variables
        run: |
          echo "🔍 Debugging environment variables:"
          echo "AWS_REGION: ${AWS_REGION}"
          echo "ECR_REGISTRY: ${ECR_REGISTRY}"
          echo "ECR_REPOSITORY_EC2: ${ECR_REPOSITORY_EC2}"
          echo "Expected ECR URI: ${ECR_REGISTRY}/${ECR_REPOSITORY_EC2}:latest"
          
          # Extract account ID from ECR registry for verification
          if [[ "${ECR_REGISTRY}" =~ ^([0-9]{12})\.dkr\.ecr\.([^.]+)\.amazonaws\.com$ ]]; then
            echo "Extracted AWS Account ID: ${BASH_REMATCH[1]}"
            echo "Extracted Region: ${BASH_REMATCH[2]}"
          else
            echo "⚠️ ECR_REGISTRY format doesn't match expected pattern"
          fi
          
          # Test AWS connectivity
          echo "🔍 Testing AWS connectivity:"
          aws sts get-caller-identity
          
          # Test ECR connectivity
          echo "🔍 Testing ECR repository access:"
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY_EC2}" --region "${AWS_REGION}" || echo "Repository may not exist yet"

      - name: Run build script
        run: |
          chmod +x ec2_deploy/build.sh
          ./ec2_deploy/build.sh

      - name: Add SSH key for deploy
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Run deploy script
        env:
          EC2_IP: ${{ secrets.EC2_PUBLIC_IP }}
          KEY_PATH: "./ec2_key.pem"
        run: |
          chmod +x ec2_deploy/deploy.sh
          ./ec2_deploy/deploy.sh